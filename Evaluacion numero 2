/* Angel Malaver CI 30310383 */
#include <stdio.h>
#include <string.h>

struct musica { 
    char nombre[20]; 
    float precio; 
    int cantidad; 

    struct inf { 
        char artista[20]; 
        char genero[15]; 
        int estreno; 
    } inf;
};

struct clientes {
    char nombre[20]; 
    char contacto[20]; 
    float saldo; 
    struct musica lib[100];
};

struct musica musicas[100]; 
int musicacosto=0;
struct clientes clientess[100]; 
int clientescosto=0;
char *generos[15] = {"tristes", "rap", "pop", "rock", "house", "chill", "trap", "tumbados", "religiosa"}; 

struct clientes getclientes(char nombre[], struct clientes clientess[], int tamano) {
    for (int i=0; i<tamano; i++) {
        if (!strcmp(nombre, clientess[i].nombre)) 
            return clientess[i];
    }
    struct clientes failed = {"NULL"};
    return failed;
}

int getclientesindices(char nombre[], struct clientes clientess[], int tamano) {
    for (int i=0; i<tamano; i++) {
        if (!strcmp(nombre, clientess[i].nombre)) 
            return i; 
    }
    return -1;

}

struct musica getmusica(char nombre[], struct musica musicas[], int tamano) {
    for (int i=0; i<tamano; i++) {
        if (!strcmp(nombre, musicas[i].nombre)) 
            return musicas[i]; 
    }
    struct musica failed = {"NULL"};
    return failed;

}

int getmusicaindices(char nombre[], struct musica musicas[], int tamano) {
    for (int i=0; i<tamano; i++) {
        if (!strcmp(nombre, musicas[i].nombre)) 
            return i; 
    }
    return -1;

}

int search(char key[], char *array[], int tamano) {
    for (int i=0; i<tamano; i++) {
        if (!strcmp(key, array[i])) 
            return 1;
    }
    return 0;
}

void line(int tamano, char caract) {
    for (int i=0; i<tamano; i++)
        printf("%c", caract);
    printf("\n");
}

char* ES(int precio) {
    if (precio < 10)
        return "   ";
    else if (precio < 100)
        return "  ";
    else if (precio < 1000)
        return " ";
    return "";
}

char* rplchr(char string[], int tamano) {
    for (int c=0;c<tamano;c++) {
        if (string[c]=='-' || string[c]=='_')
            string[c] = ' ';
    }
    return string;
}

int getlibtamano(struct clientes clientes) {
    int tamano = 0;
    for (int i=0; i<100; i++) {
        if (strcmp(clientes.lib[i].nombre, ""))
            tamano++;
    }   
    return tamano;
}

void listmusicas() {
    int tamano = sizeof(musicas)/sizeof(musicas[0]);
    line(93, '-');

        printf("| %-20s | %-20s | %-15s | %-5s | %-9s | %-6s |\n", "Nombre", "disquera", "Genero", "Año", "Precio", "cantidad");
    line(93, '-');
    for (int i=0; i<tamano; i++) {
        if (strcmp(musicas[i].nombre, ""))
            printf("| %-20s | %-20s | %-15s | %04d | $ %-2.2f%s | %-6d |\n", rplchr(musicas[i].nombre,20), rplchr(musicas[i].inf.artista,20), musicas[i].inf.genero, musicas[i].inf.estreno, musicas[i].precio, ES(musicas[i].precio), musicas[i].cantidad);

    }
    line(93, '-');
}

void showlib(struct musica musicaList[], int tamano) {
    line(65,'-');
    printf("| %-20s | %-15s | %-20s |\n", "Nombre", "Genero", "disquera");
    line(65,'-');
    for (int i=0; i<tamano; i++) {
        printf("| %-20s | %-15s | %-20s |\n", rplchr(musicaList[i].nombre, 20), musicaList[i].inf.genero, rplchr(musicaList[i].inf.artista, 20));
    }
    line(65,'-');

}

void listclientess() {
    line(60,'-');
    printf("| %-20s | %-20s | %-10s | \n", "Nombre", "contacto" , "saldo");
    line(60, '-');
    for (int i=0; i<sizeof(clientess)/sizeof(clientess[0]); i++) {
        if (strcmp(clientess[i].nombre, ""))
            printf("| %-20s | %-20s | $ %-3.3f%s |\n", rplchr(clientess[i].nombre,20), clientess[i].contacto, clientess[i].saldo, ES(clientess[i].saldo));
    }
    line(60,'-');
}

void preFac() { // Datos preseleccionados
   struct Musica pg[] = {
        { "Jugaste y Sufri"     , 10.00, 50, { "Eslabon Armando"    , "tristes"    , 2020 } },
        { "!AM FREESTYLE"       , 9.99 , 70, { "Joji    "           , "chill   "   , 2022 } },
        { "Electric Dreams"     , 9.99 , 20, { "Perturbator"        , "pop"        , 2010 } },
        { "Falling"             , 14.99, 80, { "Trevor Daniel"      , "tristes"    , 2018 } },
        { "hurt me"             , 14.99, 75, { "Juice WRLD"         , "trap"       , 2019 } },
        { "gr4ves"              , 19.99, 40, { "Konrad OldMoney"    , "Rap"        , 2020 } },
        { "Shadow Lday"         , 12.00, 80, { "portwave"           , "chill"      , 2011 } },
        { "Disaster"            , 11.00, 65, { "KSLV noh"           , "Chill"      , 2021 } },
        { "Hablamos manana"     , 9.99 , 40, { "Bad bunny"          , "trap"       , 2020 } },
        { "Glimpse of Us"       , 7.99 , 30, { "Joji"               , "religiosa"  , 2022 } },
    };
    struct ClientesD pc[] = {
        { "Angel Malaver"       , "hellwalker@gmail.com"          , 2400, {pg[3]} },
        { "Carlos Santana"      , "Carlos fernantes33@gmail.com"  , 800 , {pg[2]} },
        { "Aatrox"              , "imnotagod@gmail.com"           , 630 , {pg[3]} },
        { "Jhin el sublime"     , "4444Doctor@gmail.com"          , 4444, {pg[6]} },
        { "Gabo Garay"          , "tenemosjungla@gmail.com"       , 245 , {pg[9]} },
        { "MaestroDn624"        , "tenemosadc@gmail.com"          , 000 , {pg[5]} },
    };
    for (int g=0; g<sizeof(pg)/sizeof(pg[0]); g++)
        musicas[g] = pg[g];

    for (int c=0; c<sizeof(pc)/sizeof(pc[0]); c++) {
        pc[c].lib[0].cantidad = 1;
        clientess[c] = pc[c];
    }
}

void agregarmusica() {
    struct musica test;
    printf("Nota: Los espacios no son en barra espaciadora son con (_) y (-)\n");
    printf("Nombre: ");              scanf("%s", &test.nombre);
    printf("Precio: ");              scanf("%f", &test.precio);
    printf("artista: ");             scanf("%s", &test.inf.artista);
    printf("Genero: ");              scanf("%s", &test.inf.genero);
    printf("Año de lanzamiento: ");  scanf("%d", &test.inf.estreno);
    printf("cantidad: ");               scanf("%d", &test.cantidad); 

    if (test.precio<1 || test.inf.estreno<1 || test.cantidad<1 ||!search(test.inf.genero, generos, sizeof(generos)/sizeof(generos[0]))) {
        printf("Datos invalidos, intente con otros\n");
        agregarmusica();
    }
    else {
        strcpy(test.nombre, rplchr(test.nombre,20));
        strcpy(test.inf.artista, rplchr(test.inf.artista, 20));
        musicas[musicacosto] = test;
        musicacosto++;
    }
}

void agregarclientes() {
    struct clientes test;

    printf("Nota: Los espacios no son en barra espaciadora son con (_) y (-)\n");
    printf("Nombre: ");            scanf("%s",&test.nombre);
    printf("contacto: ");             scanf("%s",&test.contacto);
    printf("saldo de cuenta: "); scanf("%f",&test.saldo);

    if (test.saldo<0) {
        printf("Datos invalidos, intente con otros\n");
        agregarclientes();
    }
    else {
        strcpy(test.nombre, rplchr(test.nombre, 20));
        clientess[clientescosto] = test;
        clientescosto++;
    }
}

void assignment() { 
    char nombre[20];
    printf("Nota: Los espacios no son en barra espaciadora son con (_) y (-)\n");
    printf("Ingrese el nombre de la cuenta a asignar: "); scanf("%s", &nombre);

    struct clientes temp = getclientes(rplchr(nombre,20), clientess, sizeof(clientess)/sizeof(clientess[0]));
    if (!strcmp(temp.nombre, "NULL")) {
        printf("Cuenta no encontrada, intente con otra\n");
        assignment();
    }
    else {
        int indices = getclientesindices(rplchr(nombre,20), clientess, sizeof(clientess)/sizeof(clientess[0]));
        
        float temp;
        printf("Ingese la cantidad a asignar: "); scanf("%f", &temp);
        if (temp > 0 || temp < 10000) 
            clientess[indices].saldo = temp;
        else {
            printf("Valor no encontrado, intente con otro\n");
            assignment();
        }
    }
}

void listlib() {
    char nombre[20];

    printf("Nota: Los espacios no son en barra espaciadora son con (_) y (-)\n");
    printf("Ingrese la cuenta a ver: "); 
    scanf("%s", &nombre);

    struct clientes temp = getclientes(rplchr(nombre,20), clientess, (sizeof(clientess)/sizeof(clientess[0])));
    // printf(" %s | %s | %f \n", temp.nombre, temp.contacto, temp.saldo);
    if (!strcmp(temp.nombre, "NULL")) {
        printf("Esta cuenta no existe, intente de nuevo\n");
        listlib();
    }
    else {
        line(65, '-');
        printf("| Biblioteca de: %-78s|\n", rplchr(temp.nombre,20));
        showlib(temp.lib, getlibtamano(temp));
    }
}

void comprar() {
    char accountnombre[20], musicanombre[20];
    printf("Nota: Los espacios no son en barra espaciadora son con (_) y (-)\n");
    printf("Ingrese el nombre de la cuenta a utilizar: "); scanf("%s", &accountnombre);
    printf("Ingrese el nombre del musica a comprar: ");     scanf("%s", &musicanombre);
    
    strcpy(accountnombre, rplchr(accountnombre, 20));
    strcpy(musicanombre, rplchr(musicanombre, 20));
    struct clientes tempAccount = getclientes(accountnombre, clientess, sizeof(clientess)/sizeof(clientess[0]));
    struct musica tempmusica = getmusica(musicanombre, musicas, sizeof(musicas)/sizeof(musicas[0]));

    if (strcmp(accountnombre, tempAccount.nombre) && strcmp(musicanombre, tempmusica.nombre)) {
        printf("Datos invalidos, intente con otros\n");
        comprar();
    }
    else if (tempmusica.precio > tempAccount.saldo) {
        printf("error. Saldo insuficiente");
    }
    else {
        int clientesindices = getclientesindices(accountnombre, clientess, sizeof(clientess)/sizeof(clientess[0]));
        int musicaindices = getmusicaindices(musicanombre, musicas, sizeof(musicas)/sizeof(musicas[0]));
        tempmusica.cantidad = 1;

        clientess[clientesindices].lib[getlibtamano(tempAccount)] = tempmusica;
        printf("La compra fue un exito, Muchas gracias.");
    }
}

void menu() {
    printf(

        "                                 \n"
        "                                 \n"
        "   Elija una opcion:             \n"
        "                                 \n"
        " [1]  Agregar musica              \n"
        " [2]  Listar musicas              \n"
        " [3]  Agregar cliente            \n"
        " [4]  Listar clientes            \n"
        " [5]  Comprar musicas             \n"
        " [6]  Asignar balance de cliente \n"
        " [7]  Ver biblioteca             \n"
        " [8]  Datos preseleccionados     \n"
        " [9]  Salir                      \n"
        "\n"
        " > "
        
    );
    int opcion;
    scanf("%d", &opcion);
    switch (opcion) {
        case 1: agregarmusica();     menu();  break;
        case 2: listmusicas();   menu();  break;
        case 3: agregarclientes();   menu();  break;
        case 4: listclientess(); menu();  break;
        case 5: comprar();         menu();  break;                                            
        case 6: assignment();  menu();  break;
        case 7: listlib(); menu();  break;
        case 8: preFac();     menu();  break;
        case 9: break;
        default:
            printf("Opcion invalida, intente con otra\n");
            menu();
    }
}

int main() {
    menu();
    return 0;
}
